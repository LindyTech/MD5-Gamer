using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.Windows.Forms;
using MD5_Pro_Gramer.Properties;
using HtmlAgilityPack;
using System.Runtime.Remoting.Channels;
using System.Collections.ObjectModel;

namespace MD5_Pro_Gramer
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void listView1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        

        private void button1_Click(object sender, EventArgs e)
        {
            int items = 0;
            
            OpenFileDialog openFileDialog1 = new OpenFileDialog
            {
                Multiselect = true,

                InitialDirectory = @"G:\",
                Title = "Browse .iso Files",

                CheckFileExists = true,
                CheckPathExists = true,

                DefaultExt = "iso",
                Filter = "iso files (*.iso)|*.iso",
                FilterIndex = 2,
                RestoreDirectory = true,

                ReadOnlyChecked = true,
                ShowReadOnly = true
            };

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                foreach (String file in openFileDialog1.FileNames)
                {
                    items += 1;
                    
                    string directoryPath = Path.GetFullPath(file);
                    string fileName = Path.GetFileNameWithoutExtension(file);
                    long size  = new System.IO.FileInfo(directoryPath).Length;


                    GameFile gf = new GameFile(fileName, directoryPath, size, "");
                    //string md5 = e.Result.ToString();

                    //string[] row = { fileName, directoryPath };
                    //var listViewItem = new ListViewItem(row);
                    //fastObjectListView1.VirtualListSize += 1;
                    //Collection c = new Collection<GameFile>();

                    objectListView1.AddObject(gf);
                }

                toolStripStatusLabel4.Text = items.ToString();

                //textBox1.Text = openFileDialog1.FileName;
            }
            /*
            OpenFileDialog openFileDialog1 = new OpenFileDialog
            {
                InitialDirectory = @"G:\",
                Title = "Browse .iso Files",

                CheckFileExists = true,
                CheckPathExists = true,

                DefaultExt = "iso",
                Filter = "iso files (*.iso)|*.iso",
                FilterIndex = 2,
                RestoreDirectory = true,

                ReadOnlyChecked = true,
                ShowReadOnly = true
            };

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                textBox1.Text = openFileDialog1.FileName;
            }
            */
        }

        // The cryptographic service provider.
        private SHA256 Sha256 = SHA256.Create();
        private MD5 Md5 = MD5.Create();

        // Compute the file's Sha256 hash.
        private byte[] GetHashSha256(string filename)
        {
            using (FileStream stream = File.OpenRead(filename))
            {
                return Sha256.ComputeHash(stream);
            }
        }


        // Compute the file's MD5 hash.
        private byte[] GetHashMD5(string filename)
        {
            using (FileStream stream = File.OpenRead(filename))
            {
                return Md5.ComputeHash(stream);
            }
        }


        // Return a byte array as a sequence of hex values.
        public static string BytesToString(byte[] bytes)
        {
            string result = "";
            foreach (byte b in bytes) result += b.ToString("x2");
            return result;
        }

        private void button3_Click(object sender, EventArgs e)
        {

            if (objectListView1.Items.Count == 0)
            {
                MessageBox.Show("Please add .iso files to begin");
            }
            else
            {
                toolStripProgressBar1.Value = 0;
                long totalSize = 0;
                long size;

                button3.Enabled = false;

                status.Text = "calculating hashes...";

                //MessageBox.Show(progressBar1.Maximum.ToString());

                string[] GamesList = new string[objectListView1.Items.Count];
                int ListLength = objectListView1.Items.Count;

                for (int x = 0; x < this.objectListView1.Items.Count; x++)
                {
                    GamesList[x] = objectListView1.Items[x].SubItems[1].Text;
                    //MessageBox.Show(listView1.Items[x].SubItems[1].Text);

                }

                /*for (int x = 0; x < GamesList.Length; x++)
                {
                    using (Stream file = File.OpenRead(GamesList[x].ToString()))
                    {
                        size = file.Length;

                        totalSize += size;
                    }

                }
                */


                toolStripProgressBar1.Maximum = GamesList.Length;
                //toolStripProgressBar1.Maximum = (int)(totalSize / 1024)/1024;
                //MessageBox.Show(toolStripProgressBar1.Maximum.ToString());

                //New Code testing seperate background workers
                for (int x = 0; x < GamesList.Length; x++)
                {

                    BackgroundWorker bw = new BackgroundWorker();
                    bw.WorkerReportsProgress = true;
                    bw.DoWork += new DoWorkEventHandler(bw_DoWork);
                    bw.ProgressChanged += new ProgressChangedEventHandler(bw_ProgressChanged);
                    bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
                    bw.RunWorkerAsync(GamesList[x]);
                    bw.Dispose();
                }

                
            }
            

            //Old code looping in single backgroundworker
            //backgroundWorker1.RunWorkerAsync(GamesList);


        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void updateListMD5(string[] md5)
        {

            for(int x = 0; x < objectListView1.Items.Count; x++)
            {
                //MessageBox.Show(listView1.Items[x].SubItems.Count.ToString());
                if (objectListView1.Items[x].SubItems.Count < 3 && objectListView1.Items[x].SubItems[1].Text == md5[1])
                {
                    objectListView1.Items[x].SubItems.Add(md5[0]);
                    break;
                }
            }


        }

        private void bw_DoWork(object sender, DoWorkEventArgs e)
        {

            string filePath = e.Argument as string;

            byte[] buffer;
            int bytesRead;
            long size;
            long totalBytesRead = 0;
            int totalBytes;
            string[] md5Array = new string[2];

            //MessageBox.Show(filePath.Length.ToString());



            //MessageBox.Show(filePath[x]);
            using (Stream file = File.OpenRead(filePath))
            {
                size = file.Length;

                using (HashAlgorithm hasher = MD5.Create())
                {
                    do
                    {

                        buffer = new byte[4096];

                        bytesRead = file.Read(buffer, 0, buffer.Length);

                        totalBytesRead += bytesRead;

                        hasher.TransformBlock(buffer, 0, bytesRead, null, 0);

                        //(sender as BackgroundWorker).ReportProgress((int)((double)totalBytesRead / size * 1024));
                    }
                    while (bytesRead != 0);

                    hasher.TransformFinalBlock(buffer, 0, 0);
                    md5Array[0] = MakeHashString(hasher.Hash);
                    md5Array[1] = filePath;
                    e.Result = md5Array;

                }
            }
        }

        private void bw_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //MessageBox.Show(e.ProgressPercentage.ToString());
            

        }


        private void bw_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            string[] md5 = e.Result as string[];
            updateListMD5(md5);
            toolStripProgressBar1.Value += 1;
            if(toolStripProgressBar1.Value == toolStripProgressBar1.Maximum)
                button3.Enabled = true;
        }

        private static string MakeHashString(byte[] hashBytes)
        {
            StringBuilder hash = new StringBuilder(32);


            foreach (byte b in hashBytes)
                hash.Append(b.ToString("x2"));

            return hash.ToString();
        }

        private void reportProgress(object sender, long totalBytesRead, long size)
        {
            
        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            objectListView1.Items.Clear();
        }

        private void settingsToolStripMenuItem_Click(object sender, EventArgs e)
        {

            var settingsForm = new Form2();

            if (!string.IsNullOrEmpty(Properties.Settings.Default.Systems))
            {
                Properties.Settings.Default.Systems.Split(',')
                    .ToList()
                    .ForEach(item =>
                    {
                        var index = settingsForm.checkedListBox1.Items.IndexOf(item);
                        settingsForm.checkedListBox1.SetItemChecked(index, true);
                    });
            }


            settingsForm.ShowDialog();

        }

        private void Form1_Shown(object sender, EventArgs e)
        {
            var settingsForm = new Form2();

            Properties.Settings.Default.Reload();

            if (!string.IsNullOrEmpty(Properties.Settings.Default.Systems))
            {
                Properties.Settings.Default.Systems.Split(',')
                    .ToList()
                    .ForEach(item =>
                    {
                        var index = settingsForm.checkedListBox1.Items.IndexOf(item);
                        settingsForm.checkedListBox1.SetItemChecked(index, true);
                    });
            }

            //settingsForm.Show();

        }

        private void button4_Click(object sender, EventArgs e)
        {
            string[] GamesList = new string[objectListView1.Items.Count];
            string redumpSearch = "";
            var url = "";


            int ListLength = objectListView1.Items.Count;

            for (int x = 0; x < this.objectListView1.Items.Count; x++)
            {
                GamesList[x] = objectListView1.Items[x].Text;
                //MessageBox.Show(listView1.Items[x].SubItems[1].Text);
            }

            for (int x = 0; x < GamesList.Length; x++)
            {
                url =  GamesList[x].ToString();

                //MessageBox.Show(url);


                var web = new HtmlWeb();
                //var doc = web.Load(url);

            }

            

        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {

            string[] filePath = e.Argument as string[];
            //MessageBox.Show(filePath);
            int files = filePath.Length;
            byte[] buffer;
            int bytesRead;
            long size;
            long totalBytesRead = 0;
            int totalBytes;
            string[] md5Array = new string[files];

            //MessageBox.Show(filePath.Length.ToString());


            for (int x = 0; x < filePath.Length; x++)
            {
                //MessageBox.Show(filePath[x]);
                using (Stream file = File.OpenRead(filePath[x]))
                {
                    size = file.Length;

                    using (HashAlgorithm hasher = MD5.Create())
                    {
                        do
                        {

                            buffer = new byte[4096];

                            bytesRead = file.Read(buffer, 0, buffer.Length);

                            totalBytesRead += bytesRead;

                            hasher.TransformBlock(buffer, 0, bytesRead, null, 0);

                            backgroundWorker1.ReportProgress((int)((double)totalBytesRead / size * 1024));
                        }
                        while (bytesRead != 0);

                        hasher.TransformFinalBlock(buffer, 0, 0);
                        md5Array[x] = MakeHashString(hasher.Hash);
                        e.Result = md5Array;


                    }
                }
            }
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //MessageBox.Show(e.ProgressPercentage.ToString());
            if (e.ProgressPercentage < toolStripProgressBar1.Maximum)
                toolStripProgressBar1.Value = e.ProgressPercentage;
            else
                toolStripProgressBar1.Maximum += 10;

        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            //string directoryPath = Path.GetDirectoryName(textBox1.Text);
            //string fileName = Path.GetFileName(textBox1.Text);

            string[] md5 = e.Result as string[];
            for (int x = 0; x < md5.Length; x++)
            {
                objectListView1.Items[x].SubItems.Add(md5[x]);
            }

            toolStripProgressBar1.Value = 0;

        }
    }
}
